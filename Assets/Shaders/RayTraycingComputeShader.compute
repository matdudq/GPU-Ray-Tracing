#pragma kernel CSMain

//Result
RWTexture2D<float4> result;

//Skybox
Texture2D<float4> skyboxTexture;
SamplerState samplerskyboxTexture;
static const float PI = 3.14159265f;

//Camera matrixes
float4x4 cameraToWorld;
float4x4 cameraInverseProjection;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(cameraToWorld, float4(0.0f,0.0f,0.0f,1.0f)).xyz;
    
    float3 direction = mul(cameraInverseProjection,float4(uv,0.0f,1.0f)).xyz;
    
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    
    result.GetDimensions(width,height);
    
    float2 uv = float2((id.xy + float2(0.5f,0.5f)) / float2 (width,height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    //Skybox sampling
    float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;

    result[id.xy] = skyboxTexture.SampleLevel(samplerskyboxTexture, float2(phi, theta), 0);
}