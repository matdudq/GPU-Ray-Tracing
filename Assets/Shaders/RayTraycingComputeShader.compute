#pragma kernel CSMain
#define REFLECTION_COUNT 8

//Result
RWTexture2D<float4> result;

//Skybox
Texture2D<float4> skyboxTexture;
SamplerState samplerskyboxTexture;
static const float PI = 3.14159265f;

//Camera matrixes
float4x4 cameraToWorld;
float4x4 cameraInverseProjection;

float4 directionalLight;

static const float REFLECTION_ORIGIN_OFFSET = 0.001f;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

StructuredBuffer<Sphere> spheres;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f,1.0f,1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(cameraToWorld, float4(0.0f,0.0f,0.0f,1.0f)).xyz;
    
    float3 direction = mul(cameraInverseProjection,float4(uv,0.0f,1.0f)).xyz;
    
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    
    direction = normalize(direction);
        
    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f,0.0f,0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f,0.0f,0.0f);
    hit.albedo = float3(0.0f,0.0f,0.0f);
    hit.specular = float3(0.0f,0.0f,0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    float ratio = -ray.origin.y/ray.direction.y;
    if(ratio > 0 && ratio < bestHit.distance)
    {
        bestHit.distance = ratio;
        bestHit.position = ray.origin + ratio * ray.direction;
        bestHit.normal = float3(0.0f,1.0f,0.0f);
        bestHit.albedo = float3(0.8f,0.8f,0.8f);
        bestHit.specular = float3(0.3f,0.3f,0.3f);
    }
}

//Source: https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    
    //delta < 0
    if (p2sqr < 0)
    {
        return;
    }
    
    //Two solutions
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    
    IntersectGroundPlane(ray, bestHit);
    
    uint numSpheres, stride;
    spheres.GetDimensions(numSpheres, stride);
        
    for (float i = 0; i < numSpheres; i++)
    {
        IntersectSphere(ray, bestHit, spheres[i]);
    }
        
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if(hit.distance < 1.#INF)
    {
        ray.origin = hit.position + hit.normal * REFLECTION_ORIGIN_OFFSET;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;
        
        Ray shadowRay = CreateRay(hit.position + hit.normal * REFLECTION_ORIGIN_OFFSET, -directionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }
        
        //Diffuse shading
        return saturate(-dot(hit.normal, directionalLight.xyz)) * directionalLight.w * hit.albedo;
    }
    else
    {
        ray.energy = 0.0f;
    
         //Skybox sampling
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        
        float3 sampledTexture = skyboxTexture.SampleLevel(samplerskyboxTexture, float2(phi, theta), 0);
        
        return sampledTexture;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    
    result.GetDimensions(width,height);
    
    float2 uv = float2((id.xy + float2(0.5f,0.5f)) / float2 (width,height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    //Animating
    uint numSpheres, stride;
    spheres.GetDimensions(numSpheres, stride);
    
    //Tracing
    float3 color = float3(0.0f,0.0f,0.0f);
    for (int i =0; i < REFLECTION_COUNT; i++)
    {
         RayHit hit = Trace(ray);
         color += ray.energy * Shade(ray,hit);
         
         if(!any(ray.energy))
         {
            break;
         }
    } 

    result[id.xy] = float4(color, 1.0f);
}